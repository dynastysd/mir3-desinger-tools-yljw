/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040100
#define SWIGCSHARP
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_PackageWrap(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_PackageWrap(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_PackageWrap(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "common/bufferType.h"
#include "package.h"
#include "ZSTDCompress.h"
#include "ImageFrame.h"
#include "PackageUtil.h"


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(int capacity){
        std::vector< int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN int std_vector_Sl_int_Sg__getitemcopy(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg__getitem(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__setitem(std::vector< int > *self,int index,int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__AddRange(std::vector< int > *self,std::vector< int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__GetRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Insert(std::vector< int > *self,int index,int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__InsertRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveAt(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__Repeat(int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< int >(count, value);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_0(std::vector< int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_1(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__SetRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Contains(std::vector< int > *self,int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_int_Sg__IndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_int_Sg__LastIndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Remove(std::vector< int > *self,int const &value){
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< int,std::string >::mapped_type const &std_map_Sl_int_Sc_std_string_Sg__getitem(std::map< int,std::string > *self,std::map< int,std::string >::key_type const &key){
        std::map< int, std::string, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg__setitem(std::map< int,std::string > *self,std::map< int,std::string >::key_type const &key,std::map< int,std::string >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int_Sc_std_string_Sg__ContainsKey(std::map< int,std::string > *self,std::map< int,std::string >::key_type const &key){
        std::map< int, std::string, std::less< int > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg__Add(std::map< int,std::string > *self,std::map< int,std::string >::key_type const &key,std::map< int,std::string >::mapped_type const &value){
        std::map< int, std::string, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< int, std::string >(key, value));
      }
SWIGINTERN bool std_map_Sl_int_Sc_std_string_Sg__Remove(std::map< int,std::string > *self,std::map< int,std::string >::key_type const &key){
        std::map< int, std::string, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< int,std::string,std::less< int > >::iterator *std_map_Sl_int_Sc_std_string_Sg__create_iterator_begin(std::map< int,std::string > *self){
        return new std::map< int, std::string, std::less< int > >::iterator(self->begin());
      }
SWIGINTERN std::map< int,std::string >::key_type const &std_map_Sl_int_Sc_std_string_Sg__get_next_key(std::map< int,std::string > *self,std::map< int,std::string,std::less< int > >::iterator *swigiterator){
        std::map< int, std::string, std::less< int > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg__destroy_iterator(std::map< int,std::string > *self,std::map< int,std::string,std::less< int > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< int,ImageFrameInfo >::mapped_type const &std_map_Sl_int_Sc_ImageFrameInfo_Sg__getitem(std::map< int,ImageFrameInfo > *self,std::map< int,ImageFrameInfo >::key_type const &key){
        std::map< int, ImageFrameInfo, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int_Sc_ImageFrameInfo_Sg__setitem(std::map< int,ImageFrameInfo > *self,std::map< int,ImageFrameInfo >::key_type const &key,std::map< int,ImageFrameInfo >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int_Sc_ImageFrameInfo_Sg__ContainsKey(std::map< int,ImageFrameInfo > *self,std::map< int,ImageFrameInfo >::key_type const &key){
        std::map< int, ImageFrameInfo, std::less< int > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int_Sc_ImageFrameInfo_Sg__Add(std::map< int,ImageFrameInfo > *self,std::map< int,ImageFrameInfo >::key_type const &key,std::map< int,ImageFrameInfo >::mapped_type const &value){
        std::map< int, ImageFrameInfo, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< int, ImageFrameInfo >(key, value));
      }
SWIGINTERN bool std_map_Sl_int_Sc_ImageFrameInfo_Sg__Remove(std::map< int,ImageFrameInfo > *self,std::map< int,ImageFrameInfo >::key_type const &key){
        std::map< int, ImageFrameInfo, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< int,ImageFrameInfo,std::less< int > >::iterator *std_map_Sl_int_Sc_ImageFrameInfo_Sg__create_iterator_begin(std::map< int,ImageFrameInfo > *self){
        return new std::map< int, ImageFrameInfo, std::less< int > >::iterator(self->begin());
      }
SWIGINTERN std::map< int,ImageFrameInfo >::key_type const &std_map_Sl_int_Sc_ImageFrameInfo_Sg__get_next_key(std::map< int,ImageFrameInfo > *self,std::map< int,ImageFrameInfo,std::less< int > >::iterator *swigiterator){
        std::map< int, ImageFrameInfo, std::less< int > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int_Sc_ImageFrameInfo_Sg__destroy_iterator(std::map< int,ImageFrameInfo > *self,std::map< int,ImageFrameInfo,std::less< int > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< int,RemoteFileData >::mapped_type const &std_map_Sl_int_Sc_RemoteFileData_Sg__getitem(std::map< int,RemoteFileData > *self,std::map< int,RemoteFileData >::key_type const &key){
        std::map< int, RemoteFileData, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_int_Sc_RemoteFileData_Sg__setitem(std::map< int,RemoteFileData > *self,std::map< int,RemoteFileData >::key_type const &key,std::map< int,RemoteFileData >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_int_Sc_RemoteFileData_Sg__ContainsKey(std::map< int,RemoteFileData > *self,std::map< int,RemoteFileData >::key_type const &key){
        std::map< int, RemoteFileData, std::less< int > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_int_Sc_RemoteFileData_Sg__Add(std::map< int,RemoteFileData > *self,std::map< int,RemoteFileData >::key_type const &key,std::map< int,RemoteFileData >::mapped_type const &value){
        std::map< int, RemoteFileData, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< int, RemoteFileData >(key, value));
      }
SWIGINTERN bool std_map_Sl_int_Sc_RemoteFileData_Sg__Remove(std::map< int,RemoteFileData > *self,std::map< int,RemoteFileData >::key_type const &key){
        std::map< int, RemoteFileData, std::less< int > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< int,RemoteFileData,std::less< int > >::iterator *std_map_Sl_int_Sc_RemoteFileData_Sg__create_iterator_begin(std::map< int,RemoteFileData > *self){
        return new std::map< int, RemoteFileData, std::less< int > >::iterator(self->begin());
      }
SWIGINTERN std::map< int,RemoteFileData >::key_type const &std_map_Sl_int_Sc_RemoteFileData_Sg__get_next_key(std::map< int,RemoteFileData > *self,std::map< int,RemoteFileData,std::less< int > >::iterator *swigiterator){
        std::map< int, RemoteFileData, std::less< int > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_int_Sc_RemoteFileData_Sg__destroy_iterator(std::map< int,RemoteFileData > *self,std::map< int,RemoteFileData,std::less< int > >::iterator *swigiterator){
        delete swigiterator;
      }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "PackageWrap_wrap.h"

SwigDirector_Callback::SwigDirector_Callback() : Callback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_Callback::~SwigDirector_Callback() {
  
}


void SwigDirector_Callback::run(char const *msg) {
  char * jmsg = 0 ;
  
  if (!swig_callbackrun) {
    Callback::run(msg);
    return;
  } else {
    jmsg = SWIG_csharp_string_callback((const char *)msg); 
    swig_callbackrun(jmsg);
  }
}

void SwigDirector_Callback::swig_connect_director(SWIG_Callback0_t callbackrun) {
  swig_callbackrun = callbackrun;
}

void SwigDirector_Callback::swig_init_callbacks() {
  swig_callbackrun = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_ImageFrameInfo_offx_set(void * jarg1, short jarg2) {
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  short arg2 ;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->offx = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ImageFrameInfo_offx_get(void * jarg1) {
  short jresult ;
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  short result;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  result = (short) ((arg1)->offx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageFrameInfo_offy_set(void * jarg1, short jarg2) {
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  short arg2 ;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->offy = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ImageFrameInfo_offy_get(void * jarg1) {
  short jresult ;
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  short result;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  result = (short) ((arg1)->offy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageFrameInfo_wid_set(void * jarg1, short jarg2) {
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  short arg2 ;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->wid = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ImageFrameInfo_wid_get(void * jarg1) {
  short jresult ;
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  short result;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  result = (short) ((arg1)->wid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageFrameInfo_hei_set(void * jarg1, short jarg2) {
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  short arg2 ;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->hei = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ImageFrameInfo_hei_get(void * jarg1) {
  short jresult ;
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  short result;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  result = (short) ((arg1)->hei);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageFrameInfo_posx_set(void * jarg1, short jarg2) {
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  short arg2 ;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->posx = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ImageFrameInfo_posx_get(void * jarg1) {
  short jresult ;
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  short result;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  result = (short) ((arg1)->posx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageFrameInfo_posy_set(void * jarg1, short jarg2) {
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  short arg2 ;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->posy = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ImageFrameInfo_posy_get(void * jarg1) {
  short jresult ;
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  short result;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  result = (short) ((arg1)->posy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageFrameInfo_image_set(void * jarg1, unsigned short jarg2) {
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->image = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ImageFrameInfo_image_get(void * jarg1) {
  unsigned short jresult ;
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  unsigned short result;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  result = (unsigned short) ((arg1)->image);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageFrameInfo_rotated_set(void * jarg1, unsigned int jarg2) {
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->rotated = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageFrameInfo_rotated_get(void * jarg1) {
  unsigned int jresult ;
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  bool result;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  result = (bool) ((arg1)->rotated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageFrameInfo_reserved_set(void * jarg1, unsigned int jarg2) {
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->reserved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageFrameInfo_reserved_get(void * jarg1) {
  unsigned int jresult ;
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  bool result;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  result = (bool) ((arg1)->reserved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageFrameInfo_owid_set(void * jarg1, short jarg2) {
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  short arg2 ;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->owid = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ImageFrameInfo_owid_get(void * jarg1) {
  short jresult ;
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  short result;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  result = (short) ((arg1)->owid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageFrameInfo_ohei_set(void * jarg1, short jarg2) {
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  short arg2 ;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->ohei = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ImageFrameInfo_ohei_get(void * jarg1) {
  short jresult ;
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  short result;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  result = (short) ((arg1)->ohei);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImageFrameInfo() {
  void * jresult ;
  ImageFrameInfo *result = 0 ;
  
  result = (ImageFrameInfo *)new ImageFrameInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImageFrameInfo(void * jarg1) {
  ImageFrameInfo *arg1 = (ImageFrameInfo *) 0 ;
  
  arg1 = (ImageFrameInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TexInfo_offx_set(void * jarg1, short jarg2) {
  TexInfo *arg1 = (TexInfo *) 0 ;
  short arg2 ;
  
  arg1 = (TexInfo *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->offx = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_TexInfo_offx_get(void * jarg1) {
  short jresult ;
  TexInfo *arg1 = (TexInfo *) 0 ;
  short result;
  
  arg1 = (TexInfo *)jarg1; 
  result = (short) ((arg1)->offx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TexInfo_offy_set(void * jarg1, short jarg2) {
  TexInfo *arg1 = (TexInfo *) 0 ;
  short arg2 ;
  
  arg1 = (TexInfo *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->offy = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_TexInfo_offy_get(void * jarg1) {
  short jresult ;
  TexInfo *arg1 = (TexInfo *) 0 ;
  short result;
  
  arg1 = (TexInfo *)jarg1; 
  result = (short) ((arg1)->offy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TexInfo_wid_set(void * jarg1, short jarg2) {
  TexInfo *arg1 = (TexInfo *) 0 ;
  short arg2 ;
  
  arg1 = (TexInfo *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->wid = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_TexInfo_wid_get(void * jarg1) {
  short jresult ;
  TexInfo *arg1 = (TexInfo *) 0 ;
  short result;
  
  arg1 = (TexInfo *)jarg1; 
  result = (short) ((arg1)->wid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TexInfo_hei_set(void * jarg1, short jarg2) {
  TexInfo *arg1 = (TexInfo *) 0 ;
  short arg2 ;
  
  arg1 = (TexInfo *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->hei = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_TexInfo_hei_get(void * jarg1) {
  short jresult ;
  TexInfo *arg1 = (TexInfo *) 0 ;
  short result;
  
  arg1 = (TexInfo *)jarg1; 
  result = (short) ((arg1)->hei);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TexInfo() {
  void * jresult ;
  TexInfo *result = 0 ;
  
  result = (TexInfo *)new TexInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TexInfo(void * jarg1) {
  TexInfo *arg1 = (TexInfo *) 0 ;
  
  arg1 = (TexInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BufferType_data(void * jarg1) {
  void * jresult ;
  BufferType *arg1 = (BufferType *) 0 ;
  void *result = 0 ;
  
  arg1 = (BufferType *)jarg1; 
  result = (void *)((BufferType const *)arg1)->data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_BufferType_size(void * jarg1) {
  unsigned long jresult ;
  BufferType *arg1 = (BufferType *) 0 ;
  size_t result;
  
  arg1 = (BufferType *)jarg1; 
  result = ((BufferType const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BufferType(void * jarg1) {
  BufferType *arg1 = (BufferType *) 0 ;
  
  arg1 = (BufferType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BufferType() {
  void * jresult ;
  BufferType *result = 0 ;
  
  result = (BufferType *)new BufferType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BufferType_resize(void * jarg1, unsigned long jarg2) {
  BufferType *arg1 = (BufferType *) 0 ;
  size_t arg2 ;
  
  arg1 = (BufferType *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_Clear(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_Add(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((int const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorInt_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VectorInt_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorInt__SWIG_0() {
  void * jresult ;
  std::vector< int > *result = 0 ;
  
  result = (std::vector< int > *)new std::vector< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorInt__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return 0;
  } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VectorInt__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorInt_getitemcopy(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)std_vector_Sl_int_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorInt_getitem(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_setitem(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__setitem(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_AddRange(void * jarg1, void * jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  std_vector_Sl_int_Sg__AddRange(arg1,(std::vector< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorInt_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_Insert(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__Insert(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__InsertRange(arg1,arg2,(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_RemoveAt(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_int_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VectorInt_Repeat(int jarg1, int jarg2) {
  void * jresult ;
  int *arg1 = 0 ;
  int arg2 ;
  int temp1 ;
  std::vector< int > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__Repeat((int const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_Reverse__SWIG_0(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  std_vector_Sl_int_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_VectorInt_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__SetRange(arg1,arg2,(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorInt_Contains(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Contains(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorInt_IndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__IndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VectorInt_LastIndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__LastIndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VectorInt_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VectorInt(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapInt2String__SWIG_0() {
  void * jresult ;
  std::map< int,std::string > *result = 0 ;
  
  result = (std::map< int,std::string > *)new std::map< int,std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapInt2String__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int,std::string > *arg1 = 0 ;
  std::map< int,std::string > *result = 0 ;
  
  arg1 = (std::map< int,std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,std::string > const & is null", 0);
    return 0;
  } 
  result = (std::map< int,std::string > *)new std::map< int,std::string >((std::map< int,std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MapInt2String_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::size_type result;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  result = ((std::map< int,std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapInt2String_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  bool result;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  result = (bool)((std::map< int,std::string > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapInt2String_Clear(void * jarg1) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_MapInt2String_getitem(void * jarg1, int jarg2) {
  const char * jresult ;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  std::map< int,std::string >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  temp2 = (std::map< int,std::string >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< int,std::string >::mapped_type *) &std_map_Sl_int_Sc_std_string_Sg__getitem(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapInt2String_setitem(void * jarg1, int jarg2, const char * jarg3) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  std::map< int,std::string >::mapped_type *arg3 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  temp2 = (std::map< int,std::string >::key_type)jarg2; 
  arg2 = &temp2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< int,std::string >::mapped_type arg3_str(jarg3);
  arg3 = &arg3_str; 
  std_map_Sl_int_Sc_std_string_Sg__setitem(arg1,(int const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapInt2String_ContainsKey(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  temp2 = (std::map< int,std::string >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_std_string_Sg__ContainsKey(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapInt2String_Add(void * jarg1, int jarg2, const char * jarg3) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  std::map< int,std::string >::mapped_type *arg3 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  temp2 = (std::map< int,std::string >::key_type)jarg2; 
  arg2 = &temp2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< int,std::string >::mapped_type arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_map_Sl_int_Sc_std_string_Sg__Add(arg1,(int const &)*arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapInt2String_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string >::key_type *arg2 = 0 ;
  std::map< int,std::string >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  temp2 = (std::map< int,std::string >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_std_string_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MapInt2String_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string,std::less< int > >::iterator *result = 0 ;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  result = (std::map< int,std::string,std::less< int > >::iterator *)std_map_Sl_int_Sc_std_string_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MapInt2String_get_next_key(void * jarg1, void * jarg2) {
  int jresult ;
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string,std::less< int > >::iterator *arg2 = (std::map< int,std::string,std::less< int > >::iterator *) 0 ;
  std::map< int,std::string >::key_type *result = 0 ;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  arg2 = (std::map< int,std::string,std::less< int > >::iterator *)jarg2; 
  result = (std::map< int,std::string >::key_type *) &std_map_Sl_int_Sc_std_string_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapInt2String_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  std::map< int,std::string,std::less< int > >::iterator *arg2 = (std::map< int,std::string,std::less< int > >::iterator *) 0 ;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  arg2 = (std::map< int,std::string,std::less< int > >::iterator *)jarg2; 
  std_map_Sl_int_Sc_std_string_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MapInt2String(void * jarg1) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  
  arg1 = (std::map< int,std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapInt2ImageFrameInfo__SWIG_0() {
  void * jresult ;
  std::map< int,ImageFrameInfo > *result = 0 ;
  
  result = (std::map< int,ImageFrameInfo > *)new std::map< int,ImageFrameInfo >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapInt2ImageFrameInfo__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int,ImageFrameInfo > *arg1 = 0 ;
  std::map< int,ImageFrameInfo > *result = 0 ;
  
  arg1 = (std::map< int,ImageFrameInfo > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,ImageFrameInfo > const & is null", 0);
    return 0;
  } 
  result = (std::map< int,ImageFrameInfo > *)new std::map< int,ImageFrameInfo >((std::map< int,ImageFrameInfo > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MapInt2ImageFrameInfo_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int,ImageFrameInfo > *arg1 = (std::map< int,ImageFrameInfo > *) 0 ;
  std::map< int,ImageFrameInfo >::size_type result;
  
  arg1 = (std::map< int,ImageFrameInfo > *)jarg1; 
  result = ((std::map< int,ImageFrameInfo > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapInt2ImageFrameInfo_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int,ImageFrameInfo > *arg1 = (std::map< int,ImageFrameInfo > *) 0 ;
  bool result;
  
  arg1 = (std::map< int,ImageFrameInfo > *)jarg1; 
  result = (bool)((std::map< int,ImageFrameInfo > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapInt2ImageFrameInfo_Clear(void * jarg1) {
  std::map< int,ImageFrameInfo > *arg1 = (std::map< int,ImageFrameInfo > *) 0 ;
  
  arg1 = (std::map< int,ImageFrameInfo > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MapInt2ImageFrameInfo_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::map< int,ImageFrameInfo > *arg1 = (std::map< int,ImageFrameInfo > *) 0 ;
  std::map< int,ImageFrameInfo >::key_type *arg2 = 0 ;
  std::map< int,ImageFrameInfo >::key_type temp2 ;
  std::map< int,ImageFrameInfo >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int,ImageFrameInfo > *)jarg1; 
  temp2 = (std::map< int,ImageFrameInfo >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< int,ImageFrameInfo >::mapped_type *) &std_map_Sl_int_Sc_ImageFrameInfo_Sg__getitem(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapInt2ImageFrameInfo_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::map< int,ImageFrameInfo > *arg1 = (std::map< int,ImageFrameInfo > *) 0 ;
  std::map< int,ImageFrameInfo >::key_type *arg2 = 0 ;
  std::map< int,ImageFrameInfo >::mapped_type *arg3 = 0 ;
  std::map< int,ImageFrameInfo >::key_type temp2 ;
  
  arg1 = (std::map< int,ImageFrameInfo > *)jarg1; 
  temp2 = (std::map< int,ImageFrameInfo >::key_type)jarg2; 
  arg2 = &temp2; 
  arg3 = (std::map< int,ImageFrameInfo >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,ImageFrameInfo >::mapped_type const & is null", 0);
    return ;
  } 
  std_map_Sl_int_Sc_ImageFrameInfo_Sg__setitem(arg1,(int const &)*arg2,(ImageFrameInfo const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapInt2ImageFrameInfo_ContainsKey(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,ImageFrameInfo > *arg1 = (std::map< int,ImageFrameInfo > *) 0 ;
  std::map< int,ImageFrameInfo >::key_type *arg2 = 0 ;
  std::map< int,ImageFrameInfo >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,ImageFrameInfo > *)jarg1; 
  temp2 = (std::map< int,ImageFrameInfo >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_ImageFrameInfo_Sg__ContainsKey(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapInt2ImageFrameInfo_Add(void * jarg1, int jarg2, void * jarg3) {
  std::map< int,ImageFrameInfo > *arg1 = (std::map< int,ImageFrameInfo > *) 0 ;
  std::map< int,ImageFrameInfo >::key_type *arg2 = 0 ;
  std::map< int,ImageFrameInfo >::mapped_type *arg3 = 0 ;
  std::map< int,ImageFrameInfo >::key_type temp2 ;
  
  arg1 = (std::map< int,ImageFrameInfo > *)jarg1; 
  temp2 = (std::map< int,ImageFrameInfo >::key_type)jarg2; 
  arg2 = &temp2; 
  arg3 = (std::map< int,ImageFrameInfo >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,ImageFrameInfo >::mapped_type const & is null", 0);
    return ;
  } 
  try {
    std_map_Sl_int_Sc_ImageFrameInfo_Sg__Add(arg1,(int const &)*arg2,(ImageFrameInfo const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapInt2ImageFrameInfo_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,ImageFrameInfo > *arg1 = (std::map< int,ImageFrameInfo > *) 0 ;
  std::map< int,ImageFrameInfo >::key_type *arg2 = 0 ;
  std::map< int,ImageFrameInfo >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,ImageFrameInfo > *)jarg1; 
  temp2 = (std::map< int,ImageFrameInfo >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_ImageFrameInfo_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MapInt2ImageFrameInfo_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int,ImageFrameInfo > *arg1 = (std::map< int,ImageFrameInfo > *) 0 ;
  std::map< int,ImageFrameInfo,std::less< int > >::iterator *result = 0 ;
  
  arg1 = (std::map< int,ImageFrameInfo > *)jarg1; 
  result = (std::map< int,ImageFrameInfo,std::less< int > >::iterator *)std_map_Sl_int_Sc_ImageFrameInfo_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MapInt2ImageFrameInfo_get_next_key(void * jarg1, void * jarg2) {
  int jresult ;
  std::map< int,ImageFrameInfo > *arg1 = (std::map< int,ImageFrameInfo > *) 0 ;
  std::map< int,ImageFrameInfo,std::less< int > >::iterator *arg2 = (std::map< int,ImageFrameInfo,std::less< int > >::iterator *) 0 ;
  std::map< int,ImageFrameInfo >::key_type *result = 0 ;
  
  arg1 = (std::map< int,ImageFrameInfo > *)jarg1; 
  arg2 = (std::map< int,ImageFrameInfo,std::less< int > >::iterator *)jarg2; 
  result = (std::map< int,ImageFrameInfo >::key_type *) &std_map_Sl_int_Sc_ImageFrameInfo_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapInt2ImageFrameInfo_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int,ImageFrameInfo > *arg1 = (std::map< int,ImageFrameInfo > *) 0 ;
  std::map< int,ImageFrameInfo,std::less< int > >::iterator *arg2 = (std::map< int,ImageFrameInfo,std::less< int > >::iterator *) 0 ;
  
  arg1 = (std::map< int,ImageFrameInfo > *)jarg1; 
  arg2 = (std::map< int,ImageFrameInfo,std::less< int > >::iterator *)jarg2; 
  std_map_Sl_int_Sc_ImageFrameInfo_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MapInt2ImageFrameInfo(void * jarg1) {
  std::map< int,ImageFrameInfo > *arg1 = (std::map< int,ImageFrameInfo > *) 0 ;
  
  arg1 = (std::map< int,ImageFrameInfo > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapInt2RemoteFileData__SWIG_0() {
  void * jresult ;
  std::map< int,RemoteFileData > *result = 0 ;
  
  result = (std::map< int,RemoteFileData > *)new std::map< int,RemoteFileData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MapInt2RemoteFileData__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< int,RemoteFileData > *arg1 = 0 ;
  std::map< int,RemoteFileData > *result = 0 ;
  
  arg1 = (std::map< int,RemoteFileData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,RemoteFileData > const & is null", 0);
    return 0;
  } 
  result = (std::map< int,RemoteFileData > *)new std::map< int,RemoteFileData >((std::map< int,RemoteFileData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MapInt2RemoteFileData_size(void * jarg1) {
  unsigned long jresult ;
  std::map< int,RemoteFileData > *arg1 = (std::map< int,RemoteFileData > *) 0 ;
  std::map< int,RemoteFileData >::size_type result;
  
  arg1 = (std::map< int,RemoteFileData > *)jarg1; 
  result = ((std::map< int,RemoteFileData > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapInt2RemoteFileData_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< int,RemoteFileData > *arg1 = (std::map< int,RemoteFileData > *) 0 ;
  bool result;
  
  arg1 = (std::map< int,RemoteFileData > *)jarg1; 
  result = (bool)((std::map< int,RemoteFileData > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapInt2RemoteFileData_Clear(void * jarg1) {
  std::map< int,RemoteFileData > *arg1 = (std::map< int,RemoteFileData > *) 0 ;
  
  arg1 = (std::map< int,RemoteFileData > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MapInt2RemoteFileData_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::map< int,RemoteFileData > *arg1 = (std::map< int,RemoteFileData > *) 0 ;
  std::map< int,RemoteFileData >::key_type *arg2 = 0 ;
  std::map< int,RemoteFileData >::key_type temp2 ;
  std::map< int,RemoteFileData >::mapped_type *result = 0 ;
  
  arg1 = (std::map< int,RemoteFileData > *)jarg1; 
  temp2 = (std::map< int,RemoteFileData >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::map< int,RemoteFileData >::mapped_type *) &std_map_Sl_int_Sc_RemoteFileData_Sg__getitem(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapInt2RemoteFileData_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::map< int,RemoteFileData > *arg1 = (std::map< int,RemoteFileData > *) 0 ;
  std::map< int,RemoteFileData >::key_type *arg2 = 0 ;
  std::map< int,RemoteFileData >::mapped_type *arg3 = 0 ;
  std::map< int,RemoteFileData >::key_type temp2 ;
  
  arg1 = (std::map< int,RemoteFileData > *)jarg1; 
  temp2 = (std::map< int,RemoteFileData >::key_type)jarg2; 
  arg2 = &temp2; 
  arg3 = (std::map< int,RemoteFileData >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,RemoteFileData >::mapped_type const & is null", 0);
    return ;
  } 
  std_map_Sl_int_Sc_RemoteFileData_Sg__setitem(arg1,(int const &)*arg2,(RemoteFileData const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapInt2RemoteFileData_ContainsKey(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,RemoteFileData > *arg1 = (std::map< int,RemoteFileData > *) 0 ;
  std::map< int,RemoteFileData >::key_type *arg2 = 0 ;
  std::map< int,RemoteFileData >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,RemoteFileData > *)jarg1; 
  temp2 = (std::map< int,RemoteFileData >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_RemoteFileData_Sg__ContainsKey(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapInt2RemoteFileData_Add(void * jarg1, int jarg2, void * jarg3) {
  std::map< int,RemoteFileData > *arg1 = (std::map< int,RemoteFileData > *) 0 ;
  std::map< int,RemoteFileData >::key_type *arg2 = 0 ;
  std::map< int,RemoteFileData >::mapped_type *arg3 = 0 ;
  std::map< int,RemoteFileData >::key_type temp2 ;
  
  arg1 = (std::map< int,RemoteFileData > *)jarg1; 
  temp2 = (std::map< int,RemoteFileData >::key_type)jarg2; 
  arg2 = &temp2; 
  arg3 = (std::map< int,RemoteFileData >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,RemoteFileData >::mapped_type const & is null", 0);
    return ;
  } 
  try {
    std_map_Sl_int_Sc_RemoteFileData_Sg__Add(arg1,(int const &)*arg2,(RemoteFileData const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MapInt2RemoteFileData_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::map< int,RemoteFileData > *arg1 = (std::map< int,RemoteFileData > *) 0 ;
  std::map< int,RemoteFileData >::key_type *arg2 = 0 ;
  std::map< int,RemoteFileData >::key_type temp2 ;
  bool result;
  
  arg1 = (std::map< int,RemoteFileData > *)jarg1; 
  temp2 = (std::map< int,RemoteFileData >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_RemoteFileData_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MapInt2RemoteFileData_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< int,RemoteFileData > *arg1 = (std::map< int,RemoteFileData > *) 0 ;
  std::map< int,RemoteFileData,std::less< int > >::iterator *result = 0 ;
  
  arg1 = (std::map< int,RemoteFileData > *)jarg1; 
  result = (std::map< int,RemoteFileData,std::less< int > >::iterator *)std_map_Sl_int_Sc_RemoteFileData_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MapInt2RemoteFileData_get_next_key(void * jarg1, void * jarg2) {
  int jresult ;
  std::map< int,RemoteFileData > *arg1 = (std::map< int,RemoteFileData > *) 0 ;
  std::map< int,RemoteFileData,std::less< int > >::iterator *arg2 = (std::map< int,RemoteFileData,std::less< int > >::iterator *) 0 ;
  std::map< int,RemoteFileData >::key_type *result = 0 ;
  
  arg1 = (std::map< int,RemoteFileData > *)jarg1; 
  arg2 = (std::map< int,RemoteFileData,std::less< int > >::iterator *)jarg2; 
  result = (std::map< int,RemoteFileData >::key_type *) &std_map_Sl_int_Sc_RemoteFileData_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MapInt2RemoteFileData_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< int,RemoteFileData > *arg1 = (std::map< int,RemoteFileData > *) 0 ;
  std::map< int,RemoteFileData,std::less< int > >::iterator *arg2 = (std::map< int,RemoteFileData,std::less< int > >::iterator *) 0 ;
  
  arg1 = (std::map< int,RemoteFileData > *)jarg1; 
  arg2 = (std::map< int,RemoteFileData,std::less< int > >::iterator *)jarg2; 
  std_map_Sl_int_Sc_RemoteFileData_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MapInt2RemoteFileData(void * jarg1) {
  std::map< int,RemoteFileData > *arg1 = (std::map< int,RemoteFileData > *) 0 ;
  
  arg1 = (std::map< int,RemoteFileData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZSTDCompress() {
  void * jresult ;
  ZSTDCompress *result = 0 ;
  
  result = (ZSTDCompress *)new ZSTDCompress();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZSTDCompress(void * jarg1) {
  ZSTDCompress *arg1 = (ZSTDCompress *) 0 ;
  
  arg1 = (ZSTDCompress *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ZSTDCompress_compress(void * jarg1, void * jarg2, unsigned long jarg3, void * jarg4, int jarg5) {
  unsigned long jresult ;
  ZSTDCompress *arg1 = (ZSTDCompress *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  BufferType *arg4 = 0 ;
  int arg5 ;
  size_t result;
  
  arg1 = (ZSTDCompress *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (BufferType *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BufferType & is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (arg1)->compress((void const *)arg2,arg3,*arg4,arg5);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ZSTDCompress_decompress(void * jarg1, void * jarg2, unsigned long jarg3, void * jarg4, unsigned long jarg5) {
  unsigned long jresult ;
  ZSTDCompress *arg1 = (ZSTDCompress *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  BufferType *arg4 = 0 ;
  size_t arg5 ;
  size_t result;
  
  arg1 = (ZSTDCompress *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (BufferType *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BufferType & is null", 0);
    return 0;
  } 
  arg5 = (size_t)jarg5; 
  result = (arg1)->decompress((void const *)arg2,arg3,*arg4,arg5);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ZSTDCompress_isError_zstd(unsigned long jarg1) {
  int jresult ;
  size_t arg1 ;
  int result;
  
  arg1 = (size_t)jarg1; 
  result = (int)ZSTDCompress::isError_zstd(SWIG_STD_MOVE(arg1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ZSTDCompress_getErrorDesc_zstd(unsigned long jarg1) {
  char * jresult ;
  size_t arg1 ;
  char *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (char *)ZSTDCompress::getErrorDesc_zstd(SWIG_STD_MOVE(arg1));
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Package_addBuffer__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned long jarg4, unsigned int jarg5, int jarg6) {
  int jresult ;
  Package *arg1 = (Package *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  bool arg5 ;
  int arg6 ;
  int result;
  
  arg1 = (Package *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (int)jarg6; 
  result = (int)(arg1)->addBuffer(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Package_addBuffer__SWIG_1(void * jarg1, int jarg2, void * jarg3, unsigned long jarg4, unsigned int jarg5) {
  int jresult ;
  Package *arg1 = (Package *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  size_t arg4 ;
  bool arg5 ;
  int result;
  
  arg1 = (Package *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (int)(arg1)->addBuffer(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Package_getBuffer(void * jarg1, int jarg2, void * jarg3, unsigned int * jarg4) {
  int jresult ;
  Package *arg1 = (Package *) 0 ;
  int arg2 ;
  BufferType *arg3 = 0 ;
  size_t *arg4 = 0 ;
  int result;
  
  arg1 = (Package *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (BufferType *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BufferType & is null", 0);
    return 0;
  } 
  arg4 = (size_t *)jarg4; 
  result = (int)(arg1)->getBuffer(arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Package_isFrameExist(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Package *arg1 = (Package *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Package *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->isFrameExist(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Package_isReadOnly(void * jarg1) {
  unsigned int jresult ;
  Package *arg1 = (Package *) 0 ;
  bool result;
  
  arg1 = (Package *)jarg1; 
  result = (bool)(arg1)->isReadOnly();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Package_close(void * jarg1) {
  int jresult ;
  Package *arg1 = (Package *) 0 ;
  int result;
  
  arg1 = (Package *)jarg1; 
  result = (int)(arg1)->close();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Package_applyWritedData(void * jarg1) {
  int jresult ;
  Package *arg1 = (Package *) 0 ;
  int result;
  
  arg1 = (Package *)jarg1; 
  result = (int)(arg1)->applyWritedData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Package(void * jarg1) {
  Package *arg1 = (Package *) 0 ;
  
  arg1 = (Package *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PACKAGE_OPEN(const char * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  ZSTDCompress *arg2 = (ZSTDCompress *) 0 ;
  bool arg3 = (bool) false ;
  Package *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (ZSTDCompress *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (Package *)PACKAGE_OPEN((std::string const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Callback(void * jarg1) {
  Callback *arg1 = (Callback *) 0 ;
  
  arg1 = (Callback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Callback_run(void * jarg1, char * jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Callback *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->run((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Callback_runSwigExplicitCallback(void * jarg1, char * jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Callback *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->Callback::run((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Callback_SetCallback(void * jarg1) {
  Callback *arg1 = (Callback *) 0 ;
  
  arg1 = (Callback *)jarg1; 
  Callback::SetCallback(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Callback_Call(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  Callback::Call((char const *)arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Callback() {
  void * jresult ;
  Callback *result = 0 ;
  
  result = (Callback *)new SwigDirector_Callback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Callback_director_connect(void *objarg, SwigDirector_Callback::SWIG_Callback0_t callback0) {
  Callback *obj = (Callback *)objarg;
  SwigDirector_Callback *director = static_cast<SwigDirector_Callback *>(obj);
  director->swig_connect_director(callback0);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoteFileData_data_set(void * jarg1, void * jarg2) {
  RemoteFileData *arg1 = (RemoteFileData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (RemoteFileData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RemoteFileData_data_get(void * jarg1) {
  void * jresult ;
  RemoteFileData *arg1 = (RemoteFileData *) 0 ;
  void *result = 0 ;
  
  arg1 = (RemoteFileData *)jarg1; 
  result = (void *) ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoteFileData_size_set(void * jarg1, unsigned int jarg2) {
  RemoteFileData *arg1 = (RemoteFileData *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (RemoteFileData *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RemoteFileData_size_get(void * jarg1) {
  unsigned int jresult ;
  RemoteFileData *arg1 = (RemoteFileData *) 0 ;
  unsigned int result;
  
  arg1 = (RemoteFileData *)jarg1; 
  result = (unsigned int) ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoteFileData_compressedSize_set(void * jarg1, unsigned int jarg2) {
  RemoteFileData *arg1 = (RemoteFileData *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (RemoteFileData *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->compressedSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RemoteFileData_compressedSize_get(void * jarg1) {
  unsigned int jresult ;
  RemoteFileData *arg1 = (RemoteFileData *) 0 ;
  unsigned int result;
  
  arg1 = (RemoteFileData *)jarg1; 
  result = (unsigned int) ((arg1)->compressedSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RemoteFileData() {
  void * jresult ;
  RemoteFileData *result = 0 ;
  
  result = (RemoteFileData *)new RemoteFileData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RemoteFileData(void * jarg1) {
  RemoteFileData *arg1 = (RemoteFileData *) 0 ;
  
  arg1 = (RemoteFileData *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PackageUtil_GetKeys(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Package *arg1 = 0 ;
  std::vector< int > *arg2 = 0 ;
  bool result;
  
  arg1 = (Package *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Package & is null", 0);
    return 0;
  } 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & is null", 0);
    return 0;
  } 
  result = (bool)PackageUtil::GetKeys(*arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PackageUtil_ParseImageInfos(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BufferType *arg1 = 0 ;
  std::map< int,ImageFrameInfo,std::less< int > > *arg2 = 0 ;
  bool result;
  
  arg1 = (BufferType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BufferType const & is null", 0);
    return 0;
  } 
  arg2 = (std::map< int,ImageFrameInfo,std::less< int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,ImageFrameInfo,std::less< int > > & is null", 0);
    return 0;
  } 
  result = (bool)PackageUtil::ParseImageInfos((BufferType const &)*arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PackageUtil_BuildImageInfos(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BufferType *arg1 = 0 ;
  std::map< int,ImageFrameInfo,std::less< int > > *arg2 = 0 ;
  bool result;
  
  arg1 = (BufferType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BufferType & is null", 0);
    return 0;
  } 
  arg2 = (std::map< int,ImageFrameInfo,std::less< int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,ImageFrameInfo,std::less< int > > const & is null", 0);
    return 0;
  } 
  result = (bool)PackageUtil::BuildImageInfos(*arg1,(std::map< int,ImageFrameInfo,std::less< int > > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PackageUtil_ParseRemoteInfos(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BufferType *arg1 = 0 ;
  std::map< int,std::string,std::less< int > > *arg2 = 0 ;
  bool result;
  
  arg1 = (BufferType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BufferType const & is null", 0);
    return 0;
  } 
  arg2 = (std::map< int,std::string,std::less< int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,std::string,std::less< int > > & is null", 0);
    return 0;
  } 
  result = (bool)PackageUtil::ParseRemoteInfos((BufferType const &)*arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PackageUtil_BuildRemoteInfos(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BufferType *arg1 = 0 ;
  std::map< int,std::string,std::less< int > > *arg2 = 0 ;
  bool result;
  
  arg1 = (BufferType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BufferType & is null", 0);
    return 0;
  } 
  arg2 = (std::map< int,std::string,std::less< int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,std::string,std::less< int > > const & is null", 0);
    return 0;
  } 
  result = (bool)PackageUtil::BuildRemoteInfos(*arg1,(std::map< int,std::string,std::less< int > > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PackageUtil_ParseTexInfo(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BufferType *arg1 = 0 ;
  BufferType *arg2 = 0 ;
  TexInfo *arg3 = 0 ;
  bool result;
  
  arg1 = (BufferType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BufferType const & is null", 0);
    return 0;
  } 
  arg2 = (BufferType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BufferType & is null", 0);
    return 0;
  } 
  arg3 = (TexInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TexInfo & is null", 0);
    return 0;
  } 
  result = (bool)PackageUtil::ParseTexInfo((BufferType const &)*arg1,*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PackageUtil_BuildTexInfo(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BufferType *arg1 = 0 ;
  BufferType *arg2 = 0 ;
  TexInfo *arg3 = 0 ;
  bool result;
  
  arg1 = (BufferType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BufferType const & is null", 0);
    return 0;
  } 
  arg2 = (BufferType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BufferType & is null", 0);
    return 0;
  } 
  arg3 = (TexInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "TexInfo const & is null", 0);
    return 0;
  } 
  result = (bool)PackageUtil::BuildTexInfo((BufferType const &)*arg1,*arg2,(TexInfo const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PackageUtil_ParseRemoteBlock(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BufferType *arg1 = 0 ;
  std::map< int,RemoteFileData,std::less< int > > *arg2 = 0 ;
  bool result;
  
  arg1 = (BufferType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BufferType const & is null", 0);
    return 0;
  } 
  arg2 = (std::map< int,RemoteFileData,std::less< int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,RemoteFileData,std::less< int > > & is null", 0);
    return 0;
  } 
  result = (bool)PackageUtil::ParseRemoteBlock((BufferType const &)*arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PackageUtil_BuildRemoteBlock(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BufferType *arg1 = 0 ;
  std::map< int,RemoteFileData,std::less< int > > *arg2 = 0 ;
  bool result;
  
  arg1 = (BufferType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BufferType & is null", 0);
    return 0;
  } 
  arg2 = (std::map< int,RemoteFileData,std::less< int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< int,RemoteFileData,std::less< int > > & is null", 0);
    return 0;
  } 
  result = (bool)PackageUtil::BuildRemoteBlock(*arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PackageUtil_DetectFormat(void * jarg1, unsigned long jarg2) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  Format result;
  
  arg1 = (void *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (Format)PackageUtil::DetectFormat(arg1,SWIG_STD_MOVE(arg2));
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PackageUtil() {
  void * jresult ;
  PackageUtil *result = 0 ;
  
  result = (PackageUtil *)new PackageUtil();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PackageUtil(void * jarg1) {
  PackageUtil *arg1 = (PackageUtil *) 0 ;
  
  arg1 = (PackageUtil *)jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

