//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PackageUtil : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PackageUtil(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PackageUtil obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(PackageUtil obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~PackageUtil() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PackageWrapPINVOKE.delete_PackageUtil(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static bool GetKeys(Package pkg, VectorInt keys) {
    bool ret = PackageWrapPINVOKE.PackageUtil_GetKeys(Package.getCPtr(pkg), VectorInt.getCPtr(keys));
    if (PackageWrapPINVOKE.SWIGPendingException.Pending) throw PackageWrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ParseImageInfos(BufferType buf, MapInt2ImageFrameInfo infos) {
    bool ret = PackageWrapPINVOKE.PackageUtil_ParseImageInfos(BufferType.getCPtr(buf), MapInt2ImageFrameInfo.getCPtr(infos));
    if (PackageWrapPINVOKE.SWIGPendingException.Pending) throw PackageWrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool BuildImageInfos(BufferType buf, MapInt2ImageFrameInfo infos) {
    bool ret = PackageWrapPINVOKE.PackageUtil_BuildImageInfos(BufferType.getCPtr(buf), MapInt2ImageFrameInfo.getCPtr(infos));
    if (PackageWrapPINVOKE.SWIGPendingException.Pending) throw PackageWrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ParseRemoteInfos(BufferType buf, MapInt2String infos) {
    bool ret = PackageWrapPINVOKE.PackageUtil_ParseRemoteInfos(BufferType.getCPtr(buf), MapInt2String.getCPtr(infos));
    if (PackageWrapPINVOKE.SWIGPendingException.Pending) throw PackageWrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool BuildRemoteInfos(BufferType buf, MapInt2String infos) {
    bool ret = PackageWrapPINVOKE.PackageUtil_BuildRemoteInfos(BufferType.getCPtr(buf), MapInt2String.getCPtr(infos));
    if (PackageWrapPINVOKE.SWIGPendingException.Pending) throw PackageWrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ParseTexInfo(BufferType in_, BufferType out_, TexInfo info) {
    bool ret = PackageWrapPINVOKE.PackageUtil_ParseTexInfo(BufferType.getCPtr(in_), BufferType.getCPtr(out_), TexInfo.getCPtr(info));
    if (PackageWrapPINVOKE.SWIGPendingException.Pending) throw PackageWrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool BuildTexInfo(BufferType in_, BufferType out_, TexInfo info) {
    bool ret = PackageWrapPINVOKE.PackageUtil_BuildTexInfo(BufferType.getCPtr(in_), BufferType.getCPtr(out_), TexInfo.getCPtr(info));
    if (PackageWrapPINVOKE.SWIGPendingException.Pending) throw PackageWrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ParseRemoteBlock(BufferType buf, MapInt2RemoteFileData infos) {
    bool ret = PackageWrapPINVOKE.PackageUtil_ParseRemoteBlock(BufferType.getCPtr(buf), MapInt2RemoteFileData.getCPtr(infos));
    if (PackageWrapPINVOKE.SWIGPendingException.Pending) throw PackageWrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool BuildRemoteBlock(BufferType buf, MapInt2RemoteFileData infos) {
    bool ret = PackageWrapPINVOKE.PackageUtil_BuildRemoteBlock(BufferType.getCPtr(buf), MapInt2RemoteFileData.getCPtr(infos));
    if (PackageWrapPINVOKE.SWIGPendingException.Pending) throw PackageWrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Format DetectFormat(global::System.IntPtr data, uint dataLen) {
    Format ret = (Format)PackageWrapPINVOKE.PackageUtil_DetectFormat(data, dataLen);
    return ret;
  }

  public PackageUtil() : this(PackageWrapPINVOKE.new_PackageUtil(), true) {
  }

}
