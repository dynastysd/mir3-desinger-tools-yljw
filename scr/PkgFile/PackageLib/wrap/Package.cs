//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Package : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Package(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Package obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Package obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Package() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PackageWrapPINVOKE.delete_Package(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual int addBuffer(int bufName, global::System.IntPtr buffer, uint sz, bool compress, int compressedSize) {
    int ret = PackageWrapPINVOKE.Package_addBuffer__SWIG_0(swigCPtr, bufName, buffer, sz, compress, compressedSize);
    return ret;
  }

  public virtual int addBuffer(int bufName, global::System.IntPtr buffer, uint sz, bool compress) {
    int ret = PackageWrapPINVOKE.Package_addBuffer__SWIG_1(swigCPtr, bufName, buffer, sz, compress);
    return ret;
  }

  public virtual int getBuffer(int filename, BufferType out_, out uint size) {
    int ret = PackageWrapPINVOKE.Package_getBuffer(swigCPtr, filename, BufferType.getCPtr(out_), out size);
    if (PackageWrapPINVOKE.SWIGPendingException.Pending) throw PackageWrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isFrameExist(int frameName) {
    bool ret = PackageWrapPINVOKE.Package_isFrameExist(swigCPtr, frameName);
    return ret;
  }

  public virtual bool isReadOnly() {
    bool ret = PackageWrapPINVOKE.Package_isReadOnly(swigCPtr);
    return ret;
  }

  public virtual int close() {
    int ret = PackageWrapPINVOKE.Package_close(swigCPtr);
    return ret;
  }

  public virtual int applyWritedData() {
    int ret = PackageWrapPINVOKE.Package_applyWritedData(swigCPtr);
    return ret;
  }

}
